---
name: dibs
logger: ['Stderr', 'log_level', 'info']

variables:
   - &version_major           '0'
   - &version_minor           '5'
   - &version_patch           '3'
   - &version ['join', '.', *version_major, *version_minor, *version_patch]
   - &version_maj_min ['join', '.', *version_major, *version_minor]
   - &base_image          'alpine:3.6'
   - &builder_image_name  'dibs-builder'
   - &bundler_image_name  'dibs-bundler'
   - &bases_reference_tag '0.5'
   - &builder_image ['join', ':', *builder_image_name, *bases_reference_tag]
   - &bundler_image ['join', ':', *bundler_image_name, *bases_reference_tag]
   - &target_image_name   'dibs'

   - unexpanded:
      tags: &version_tags ['*', 'latest', *version_maj_min, *version]
      commit: &basic_commit
         entrypoint: [ ]
         cmd: [ '/bin/sh', '-l' ]
         user: root
         workdir: /root

   - &username             'user'
   - &groupname            'user'

   - &appdir               '/app'
   - &dibspath ['join', '/', *appdir, 'bin/dibs']

packs:
   basic:
      type:   git
      origin: https://github.com/polettix/dibspack-basic.git

actions:
   default: [help]

   help:
      type: log
      message: |
         Docker Image Build System

         # generate base images
         $ dibs bases

         # regular run
         $ dibs target

         # "quick" run, additional prerequisites will be ignored
         $ dibs quick

   ###### Main Sketches, used as entry points
   bases:
      - build-base
      - bundle-base

   target:
      - build
      - bundle

   quick:
      - build-quick
      - bundle-quick

   ###### Support Sketches
   build-enviles: # actually not a sketch, but used as base for others
      envile:
         DIBS_PREREQS: build

   bundle-enviles: # same as build-enviles, not a real sketch
      envile:
         DIBS_PREREQS: bundle

   # Base images
   base-layers:
      - from: *base_image
      - add-normal-user
      - ensure-prereqs

   build-base:
      extends: build-enviles
      actions:
         - base-layers
         - name: 'save builder image'
           image_name: *builder_image_name
           tags: *version_tags

   bundle-base:
      extends: bundle-enviles
      actions:
         - base-layers
         - install-profile-exec
         - name: 'save bundler image'
           image_name: *bundler_image_name
           tags: *version_tags

   # Build
   build-operations:
      - src-in-app
      - build-perl-modules
      - cache-application

   build:
      extends: build-enviles
      actions:
         - from: *builder_image
         - ensure-prereqs
         - build-operations

   build-quick:
      - from: *builder_image
      - build-operations

   # Bundle
   bundle-operations:
      - install-application
      - save-bundle

   bundle:
      extends: bundle-enviles
      actions:
         - from: *bundler_image
         - ensure-prereqs
         - bundle-operations

   bundle-quick:
      - from: *bundler_image
      - bundle-operations

   # Basic Strokes
   add-normal-user:
      name: add a regular, unprivileged user
      pack: basic
      path: wrapexec/suexec
      args: ['-u', *username, '-g', *groupname, '-h', *appdir]
      user: root

   ensure-prereqs:
      name: install OS-level prerequisites
      pack: basic
      path: prereqs
      user: root
      commit: *basic_commit

   src-in-app:
      name: 'copy source in directory for build'
      #pack: 'src:dibspacks/src-in-app.sh'
      pack:
         run: |
            #!/bin/sh
            exec >&2
            username="${1:-"user"}"
            groupname="${2:-"user"}"
            app_dir="${3:-"/app"}"
            src_dir="$(cat DIBS_DIR_SRC)"
            rm -rf "$app_dir"
            cp -a "$src_dir" "$app_dir"
            rm -rf "$app_dir/local"
            mkdir -p "$app_dir/.profile.d"
            cat >"$app_dir/.profile" <<'END'
            #!/bin/sh
            for f in "$HOME/.profile.d"/*.sh ; do
               . "$f"
            done
            END
            set -x
            chown -R "$username:$groupname" "$app_dir"

      args: [*username, *groupname, *appdir]
      user: root

   build-perl-modules:
      name: 'build perl modules'
      pack: basic
      path: perl/build
      args: ['-w', *appdir, '-V', *version]
      user: *username

   cache-application:
      name: 'copy build application in cache'
      pack: basic
      path: install/with-dibsignore
      args: ['--src', *appdir, '--dst', {path_cache: 'perl-app'}]
      user: root

   install-application:
      name: 'install application to target path'
      pack: basic
      path: install/plain-copy
      args: [{path_cache: 'perl-app'}, *appdir]
      user: root
      commit:
         entrypoint: [ "/suexec", "-r", ".", "-A", "/var/run/docker.sock",
            "--", "/profilexec", *dibspath ]
         cmd: [ "--help" ]
         workdir: *appdir

   save-bundle:
      name: 'save bundle image'
      image_name: *target_image_name
      tags: *version_tags

   install-profile-exec:
      name: 'install .profile execution machinery'
      pack: basic
      path: wrapexec/install
      args: ['suexec', 'profilexec']
      user: root
